cmake_minimum_required(VERSION 3.1)

# ------------------------------------------------------------------------------#
# Enable TBM3 cmake module directory                                            #
# ------------------------------------------------------------------------------#
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# ------------------------------------------------------------------------------#
# Set common build                                                              #
# ------------------------------------------------------------------------------#
include(BuildCommon)

# ------------------------------------------------------------------------------#
# Add libraries                                                                 #
# ------------------------------------------------------------------------------#
add_subdirectory(pb EXCLUDE_FROM_ALL)
add_subdirectory(lib/googletest EXCLUDE_FROM_ALL)
add_subdirectory(lib/lib-common EXCLUDE_FROM_ALL)

# ------------------------------------------------------------------------------#
# Main project configuration                                                    #
# ------------------------------------------------------------------------------#
# The project() call exports a variable 'PROJECT_NAME' with the provided string content
project(bp-in-truck-connect-test)
#project(bp-in-truck-connect-prod)
#project(bp-in-truck-connect-mock)

set(PROJECT_APP_ID "18690770-9758-43fa-8de7-10d68e0acc53")
#set(PROJECT_APP_ID "190889d0-e31f-4ba8-a44d-696ba32d38db")
#set(PROJECT_APP_ID "20d42be0-a5cb-4701-9bb4-1912de551a57")
set(PROJECT_APP_SHORT_ID "18")
#set(PROJECT_APP_SHORT_ID "19")
#set(PROJECT_APP_SHORT_ID "20")

set(PROJECT_VERSION "0.0.0")

# ------------------------------------------------------------------------------#
# Set project common                                                            #
# ------------------------------------------------------------------------------#
include(ProjectCommon)

set(PROJECT_BACKEND_CONTENT_ID "420")

set(APP_NAME ${PROJECT_NAME})
set(PROJECT_BINARY "${PROJECT_BINARY_DIR}/${PROJECT_NAME}")
set(PROJECT_APP_DIR "${PROJECT_SOURCE_DIR}")
set(PROJECT_APPCODE_DIR "${PROJECT_APP_DIR}/src")
set(PROJECT_APPCONF_FILE "${PROJECT_APP_DIR}/conf/${PROJECT_NAME}.json")
set(PROJECT_APPCONF_TARGET_DIRECTORY "/opt/man/current/etc/${PROJECT_NAME}")
set(PROJECT_APPCONF_TARGET_FILE "${PROJECT_APPCONF_TARGET_DIRECTORY}/${PROJECT_NAME}.json")
set(PROJECT_UNITTEST_CODE_DIR "${PROJECT_APP_DIR}/test")
set(PROJECT_MODULTETEST_CODE_DIR "${PROJECT_APP_DIR}/module-test")

# ------------------------------------------------------------------------------#
# Build application binary                                                      #
# ------------------------------------------------------------------------------#
configure_file("src/Version.h.in" "${PROJECT_BINARY_DIR}/version/Version.h")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__FILENAME__='\"$(subst ${CMAKE_SOURCE_DIR}/,,$(abspath $<))\"'")

execute_process(
    COMMAND git log -1 --format=%h
    OUTPUT_VARIABLE GIT_COMMIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
    COMMAND git rev-parse --abbrev-ref HEAD
    OUTPUT_VARIABLE GIT_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
    COMMAND date -R
    OUTPUT_VARIABLE APP_BUILD_TIMESTAMP
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

add_definitions(-DGIT_COMMIT_HASH="${GIT_COMMIT_HASH}")
add_definitions(-DGIT_BRANCH="${GIT_BRANCH}")
add_definitions(-DAPP_BUILD_TIMESTAMP="${APP_BUILD_TIMESTAMP}")
add_definitions(-DDEFAULT_CONF_FILE="${PROJECT_APPCONF_TARGET_FILE}")
add_definitions(-DGLOBAL_CONFIG_APP_NAME="${APP_NAME}")
add_definitions(-DGLOBAL_CONFIG_BACKEND_CONTENT_ID="${PROJECT_BACKEND_CONTENT_ID}")
add_definitions(-DGLOBAL_CONFIG_APP_ID="${PROJECT_APP_ID}")
add_definitions(-DGLOBAL_CONFIG_APP_SHORT_ID="${PROJECT_APP_SHORT_ID}")
add_definitions(-DGLOBAL_PROJECT_APPCONF_TARGET_DIRECTORY="${PROJECT_APPCONF_TARGET_DIRECTORY}")
add_definitions(-DGLOBAL_PROJECT_APPCONF_TARGET_FILE="${PROJECT_APPCONF_TARGET_FILE}")

file(GLOB_RECURSE HEADERS "${PROJECT_APPCODE_DIR}/*.hpp")
file(GLOB HEADER_PATH
    "${PROJECT_BINARY_DIR}/version"
    "${PROJECT_APP_DIR}/src/generic"
    "${PROJECT_APP_DIR}/src/generic/com"
    "${PROJECT_APP_DIR}/src/generic/com/http"
    "${PROJECT_APP_DIR}/src/domain"
    "${PROJECT_APP_DIR}/src/domain/messages"
    "${PROJECT_APP_DIR}/lib/lib-common/mqtt_util/include"
    "${PROJECT_APP_DIR}/lib/lib-common/test_util/include"
)
include_directories(${HEADER_PATH})

file(GLOB_RECURSE SOURCES "src/*.cpp")
set(LIBRARIES curl jsoncpp cslclapi sreproto pthread boost_system boost_filesystem pb)

add_executable(${PROJECT_NAME} ${SOURCES})
target_link_libraries(${PROJECT_NAME} ${LIBRARIES})

# ------------------------------------------------------------------------------#
# Add testing                                                                   #
# ------------------------------------------------------------------------------#
include(Testing)

file(GLOB_RECURSE TEST_SOURCES "test/*.cpp")
file(GLOB_RECURSE TEST_HEADERS "test/*.hpp")
add_unit_test(unittest
    APP_SOURCES ${SOURCES}
    TEST_SOURCES ${TEST_SOURCES}
    LIBRARIES gtest_main gmock ${LIBRARIES}
    ARGS --gtest_output=xml:unittest-report.xml
)
target_include_directories(unittest_bin PRIVATE "test")

file(GLOB MODULE_TEST_SOURCES "module-test/*.cpp")
add_module_test(moduletest
    TEST_SOURCES ${MODULE_TEST_SOURCES}
    LIBRARIES gtest platf-mqtt-util platf-test-util ${LIBRARIES}
    RUN "${PROJECT_SOURCE_DIR}/module-test/run.sh"
    ARGS $<TARGET_FILE:${PROJECT_NAME}> --gtest_output=xml:moduletest-report.xml
    DEPENDS ${PROJECT_NAME}
)

add_coverage(${PROJECT_NAME} ${FULL_VERSION}
    SOURCES ${SOURCES} ${HEADERS}
    TEST_NAMES unittest
)

# ------------------------------------------------------------------------------#
# Add cpplint                                                                   #
# ------------------------------------------------------------------------------#
include(CppLint)

add_cpplint(${PROJECT_NAME}
    SOURCES ${SOURCES} ${HEADERS}
)

add_cpplint(unittest
    SOURCES ${TEST_SOURCES} ${TEST_HEADERS}
)

add_cpplint(moduletest
    SOURCES ${MODULE_TEST_SOURCES} ${MODULE_TEST_HEADERS}
)

# ------------------------------------------------------------------------------#
# Add doxygen documentation generation                                          #
# ------------------------------------------------------------------------------#
include(Doxygen)

add_doxygen(${PROJECT_NAME} ${FULL_VERSION}
    INPUTS ${HEADERS}
)

# ------------------------------------------------------------------------------#
# Setup systemd service config                                                   #
# ------------------------------------------------------------------------------#
include(SystemdService)

add_systemd_service(
    NAME ${PROJECT_NAME}
    UNIT_DESCRIPTION "bp In-Truck Connect"
    SERVICE_EXEC "/opt/man/current/usr/bin/${PROJECT_NAME}"
    UNIT_AFTER "alex-core.target"
    UNIT_REQUIRES "alex-core.target"
    SERVICE_RESTART "always"
    SERVICE_TYPE "notify"
    INSTALL_WANTEDBY "alex.target"
    EXEC_AS_ROOT "TRUE"
    RESOURCECTL
    "MemoryMax=5M"
)

# set service name for packaging
set(CPACK_OPKG_PACKAGE_SYSTEMD_SERVICE ${SYSTEMD_SERVICE_NAME})

# ------------------------------------------------------------------------------#
# Add IPK package generation                                                    #
# ------------------------------------------------------------------------------#
set(CPACK_OPKG_PACKAGE_DESCRIPTION "bp In-Truck Connect")
set(CPACK_OPKG_PACKAGE_MAINTAINER "Jupiter Dev Team <jupiter-dev-team@man.eu>")

set(CPACK_OPKG_PACKAGE_VERSION "${FULL_VERSION}")
set(CPACK_OPKG_PACKAGE_SYSTEMD_SERVICE "${PROJECT_NAME}.service")

install(TARGETS ${PROJECT_NAME} DESTINATION /usr/bin)
install(FILES ${PROJECT_APPCONF_FILE} DESTINATION /etc/${PROJECT_NAME})

include(SrePackage)

# ------------------------------------------------------------------------------#
# Add run_local command                                                         #
# ------------------------------------------------------------------------------#
add_custom_target(
    run_local
    DEPENDS ${PROJECT_NAME}
)
add_custom_command(
    TARGET run_local
    COMMAND "${QEMU_ARM_EXECUTABLE}" -L "$ENV{SDKTARGETSYSROOT}" "$<TARGET_FILE:${PROJECT_NAME}>"
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Running binary locally with qemu-arm..."
    USES_TERMINAL
)
